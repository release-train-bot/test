name: Release

on:
  push:
    branches:
      - release
      - main

  workflow_dispatch:

permissions:
  pages: write
  id-token: write
  contents: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Android App
        run: |
          echo "Building Android app from Compose Multiplatform codebase" >> android.txt
          # Add your Android build commands here
          # For example: ./gradlew assembleRelease

      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: |
            build/outputs/apk/release/*.apk
            *.txt

  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build iOS App
        run: |
          echo "Building iOS app from Compose Multiplatform codebase" >> ios.txt
          # Add your iOS build commands here
          # For example: xcodebuild -scheme YourScheme -configuration Release

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: |
            build/outputs/ios/*.ipa
            *.txt

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Windows App
        run: |
          ./gradlew packageReleaseDistributionForCurrentOS

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: |
            **/build/compose/binaries/main-release/msi

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build macOS App
        run: |
          ./gradlew packageReleaseDistributionForCurrentOS

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: |
            **/build/compose/binaries/main-release/dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Linux App
        run: |
          ./gradlew packageReleaseDistributionForCurrentOS

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-app
          path: |
            **/build/compose/binaries/main/

  release-client:
    needs: [build-android, build-ios, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Read version from versions.yml
        id: read_version
        run: |
          # Read major and minor versions from versions.yml
          MAJOR=$(grep 'major:' versions.yml | awk '{print $2}')
          MINOR=$(grep 'minor:' versions.yml | awk '{print $2}')

          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "Using major version: $MAJOR, minor version: $MINOR from versions.yml"

      - name: Get Latest Release
        id: get_latest_release
        run: |
          # Read major and minor versions from environment
          MAJOR="${{ env.MAJOR }}"
          MINOR="${{ env.MINOR }}"

          # Get all releases using GitHub API
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            grep '"tag_name":' | \
            sed -E 's/.*"([^"]+)".*/\1/')

          # Initialize variables
          LATEST_PATCH=-1
          LATEST_RELEASE="v0.0.0"
          IS_FIRST_RELEASE=false

          # Process each release to find the highest patch for the specified major.minor
          if [ -n "$RELEASES" ]; then
            while read -r release; do
              # Remove 'v' prefix if it exists
              VERSION=${release#v}

              # Split version into components
              IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

              # Check if this release matches our major and minor versions
              if [ "${VERSION_PARTS[0]}" = "$MAJOR" ] && [ "${VERSION_PARTS[1]}" = "$MINOR" ]; then
                # Check if this patch is higher than what we've seen so far
                if [ "${VERSION_PARTS[2]}" -gt "$LATEST_PATCH" ]; then
                  LATEST_PATCH=${VERSION_PARTS[2]}
                  LATEST_RELEASE=$release
                fi
              fi
            done <<< "$RELEASES"
          fi

          # If no matching releases exist, start with v{major}.{minor}.0
          if [ "$LATEST_PATCH" -eq -1 ]; then
            LATEST_RELEASE="v${MAJOR}.${MINOR}.0"
            IS_FIRST_RELEASE=true
            echo "No previous releases found for v${MAJOR}.${MINOR}.*. Starting with $LATEST_RELEASE"
          else
            echo "Latest release for v${MAJOR}.${MINOR}.*: $LATEST_RELEASE"
          fi

          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "IS_FIRST_RELEASE=$IS_FIRST_RELEASE" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        run: |
          # Remove 'v' prefix if it exists
          VERSION=${LATEST_RELEASE#v}

          # Split version into components to get the patch version
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

          # Check if this is the first release
          if [ "${{ env.IS_FIRST_RELEASE }}" = "true" ]; then
            # Don't increment patch version for the first release
            PATCH=${VERSION_PARTS[2]}
            echo "First release detected, not incrementing patch version"
          else
            # Increment patch version for subsequent releases
            PATCH=$((VERSION_PARTS[2] + 1))
            echo "Subsequent release detected, incrementing patch version"
          fi

          # Create new version using major and minor from versions.yml
          NEW_VERSION="v${{ env.MAJOR }}.${{ env.MINOR }}.$PATCH"
          echo "New version: $NEW_VERSION"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Check Release Notes File
        id: check_release_notes
        run: |
          if [ -s "RELEASE_NOTES.md" ]; then
            echo "RELEASE_NOTES_EXISTS=true" >> $GITHUB_ENV
            echo "Release notes file exists and is not empty, will use it for release notes"
          else
            echo "RELEASE_NOTES_EXISTS=false" >> $GITHUB_ENV
            echo "Release notes file does not exist or is empty, will use auto-generated notes"
          fi

      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-app
          path: ./artifacts/android

      - name: Download iOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: ./artifacts/ios

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-app
          path: ./artifacts/windows

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-app
          path: ./artifacts/macos

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-app
          path: ./artifacts/linux

      - name: List Downloaded Artifacts
        run: |
          echo "Listing downloaded artifacts:"
          find ./artifacts -type f | sort          

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          generate_release_notes: ${{ env.RELEASE_NOTES_EXISTS == 'false' }}
          body_path: ${{ env.RELEASE_NOTES_EXISTS == 'true' && 'RELEASE_NOTES.md' || '' }}
          make_latest: true
          files: |
            ./artifacts/windows/**/*
            ./artifacts/macos/**/*
            ./artifacts/linux/**/*
            ./artifacts/android/**/*
            ./artifacts/ios/**/*

      - name: Print Release URL
        run: |
          echo "::notice::New release created: ${{ steps.create_release.outputs.url }}"

  release-site:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: release-client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: site/package-lock.json

      - name: Install Dependencies
        working-directory: ./site
        run: npm ci

      - name: Build Site
        working-directory: ./site
        env:
          GITHUB_RELEASE_URL: ${{ needs.release-client.outputs.release_url }}
        run: npm run build

      - name: Setup Pages
        id: setup_pages
        uses: actions/configure-pages@v5

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/build/

      - name: Deploy Site
        uses: actions/deploy-pages@v4

      - name: Print Published Site URL
        run: |
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          SITE_URL="https://$REPO_OWNER.github.io/$REPO_NAME/"
          echo "::notice::Published site is available at: $SITE_URL"
